generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  role          String?   // "CLIENT" or "LAWYER"
  
  // Profile fields
  phone         String?
  address       String?
  city          String?
  country       String?
  profileImage  String?   // Cloudinary URL
  bio           String?
  
  // Lawyer-specific fields
  barNumber     String?   // For lawyers only
  district      String?   // For lawyers only
  experience    String?   // For lawyers only
  specializations String[] // Array of specializations
  education     String?   // Educational background
  certifications String[] // Professional certifications
  languages     String[]  // Languages spoken
  consultationFee Float?  // Hourly rate
  availability  String?   // Available hours/days
  
  // Profile completion status
  profileCompleted Boolean @default(false)
  
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires      DateTime
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}